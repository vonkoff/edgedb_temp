/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/// <reference types="node" />
import { ICodec } from "./codecs/ifaces";
import { Set } from "./datatypes/set";
import { ParseOptions, PrepareMessageHeaders, ProtocolVersion, QueryArgs } from "./ifaces";
import { WriteBuffer } from "./primitives/buffer";
import Event from "./primitives/event";
export declare class RawConnection {
    private sock;
    private config;
    private paused;
    private connected;
    protected lastStatus: string | null;
    private codecsRegistry;
    private queryCodecCache;
    protected serverSecret: Buffer | null;
    private serverXactStatus;
    private buffer;
    private messageWaiter;
    private connWaiter;
    protocolVersion: ProtocolVersion;
    private _abortedWith;
    connAbortWaiter: Event;
    private _waitForMessage;
    private _onConnect;
    private _abortWaiters;
    private _onClose;
    private _onError;
    private _abortWithError;
    getConnAbortError(): Error;
    private _checkState;
    private _onData;
    private _ignoreHeaders;
    private _parseHeaders;
    private _parseDescribeTypeMessage;
    private _parseCommandCompleteMessage;
    private _parseErrorMessage;
    private _parseSyncMessage;
    private _parseDataMessages;
    private _parseServerSettings;
    private _fallthrough;
    private connect;
    private _authSasl;
    private _ensureMessage;
    _parse(query: string, asJson: boolean, expectOne: boolean, alwaysDescribe: boolean, options?: ParseOptions): Promise<[number, ICodec, ICodec, number, Buffer | null, Buffer | null]>;
    private _encodeArgs;
    _executeFlow(args: QueryArgs | Buffer, inCodec: ICodec, outCodec: ICodec, result: Set | WriteBuffer): Promise<void>;
    private _optimisticExecuteFlow;
    private _getQueryCacheKey;
    private _validateFetchCardinality;
    fetch(query: string, args: QueryArgs | undefined, asJson: boolean, expectOne: boolean, requiredOne?: boolean): Promise<any>;
    getQueryCapabilities(query: string, asJson: boolean, expectOne: boolean): number | null;
    execute(query: string, allowTransactionCommands?: boolean): Promise<void>;
    resetState(): Promise<void>;
    private _abort;
    isClosed(): boolean;
    close(): Promise<void>;
    rawParse(query: string, headers?: PrepareMessageHeaders): Promise<[Buffer, Buffer, ProtocolVersion]>;
    rawExecute(encodedArgs?: Buffer | null): Promise<Buffer>;
}
