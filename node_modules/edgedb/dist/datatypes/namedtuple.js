"use strict";
/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateType = void 0;
const compat_1 = require("../compat");
const introspect_1 = require("./introspect");
function generateType(names) {
    const buf = [
        `'use strict';

    class NamedTuple extends Array {

      [introspectMethod]() {
        return {
          kind: 'namedtuple',
          fields: introFields
        }
      }

      [inspect.custom](depth, options) {
        const buf = [options.stylize('NamedTuple', 'name'), ' [ '];
        const fieldsBuf = [];
        for (const name of names) {
          const val = this[name];
          const repr = inspect(
            val,
            options.showHidden,
            depth + 1,
            options.colors
          );
          fieldsBuf.push(options.stylize(name, 'name') + ' := ' + repr);
        }
        buf.push(fieldsBuf.join(', '));
        buf.push(' ]');
        return buf.join('');
      }

      toJSON() {
        return {
    `,
    ];
    const introFields = [];
    for (let i = 0; i < names.length; i++) {
        buf.push(`${JSON.stringify(names[i])}: this[${i}],`);
        introFields.push({ name: names[i] });
    }
    buf.push(`
    }
  }
  `);
    for (let i = 0; i < names.length; i++) {
        buf.push(`
      get [${JSON.stringify(names[i])}]() {
        return this[${i}];
      }
    `);
    }
    buf.push(`
    };
    return NamedTuple;
  `);
    const code = buf.join("\n");
    const params = [
        "names",
        "inspect",
        "introspectMethod",
        "introFields",
    ];
    const args = [names, compat_1.inspect, introspect_1.introspectMethod, introFields];
    return exec(params, args, code);
}
exports.generateType = generateType;
function exec(params, args, code) {
    const func = new Function(...params, code);
    return func(...args);
}
