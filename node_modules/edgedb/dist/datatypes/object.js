"use strict";
/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2019-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateType = exports.EDGE_POINTER_IS_LINKPROP = exports.EDGE_POINTER_IS_IMPLICIT = void 0;
const compat_1 = require("../compat");
const introspect_1 = require("./introspect");
exports.EDGE_POINTER_IS_IMPLICIT = 1 << 0;
exports.EDGE_POINTER_IS_LINKPROP = 1 << 1;
function generateType(names, flags) {
    const buf = [
        `'use strict';

    class Object {
      constructor() {
    `,
    ];
    const introFields = [];
    for (let i = 0; i < names.length; i++) {
        const name = names[i];
        buf.push(`this[${JSON.stringify(name)}] = null;`);
        introFields.push({
            name,
            implicit: !!(flags[i] & exports.EDGE_POINTER_IS_IMPLICIT),
            linkprop: !!(flags[i] & exports.EDGE_POINTER_IS_LINKPROP),
        });
    }
    buf.push(`
      }

      [introspectMethod]() {
        return {
          kind: 'object',
          fields: introFields
        }
      }

      [inspect.custom](depth, options) {
        const buf = [options.stylize('Object', 'name'), ' [ '];
        const fieldsBuf = [];
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          const flag = flags[i];
          if ((flag & IMPLICIT) && !options.showHidden) {
            continue;
          }
          const val = this[name];
          const repr = inspect(
            val,
            options.showHidden,
            depth + 1,
            options.colors
          );
          fieldsBuf.push(options.stylize(name, 'name') + ' := ' + repr);
        }
        buf.push(fieldsBuf.join(', '));
        buf.push(' ]');
        return buf.join('');
      }

      toJSON() {
        return {
  `);
    let numOfJsonFields = 0;
    for (let i = 0; i < names.length; i++) {
        const name = names[i];
        const flag = flags[i];
        if (flag & exports.EDGE_POINTER_IS_IMPLICIT) {
            continue;
        }
        const sname = JSON.stringify(name);
        buf.push(`${sname}: this[${sname}],`);
        numOfJsonFields++;
    }
    if (!numOfJsonFields) {
        buf.push(`id: this.id,`);
    }
    buf.push(`
        }
      }
    };
    return Object;
  `);
    const code = buf.join("\n");
    const params = [
        "names",
        "flags",
        "IMPLICIT",
        "inspect",
        "introspectMethod",
        "introFields",
    ];
    const args = [
        names,
        flags,
        exports.EDGE_POINTER_IS_IMPLICIT,
        compat_1.inspect,
        introspect_1.introspectMethod,
        introFields,
    ];
    return exec(params, args, code);
}
exports.generateType = generateType;
function exec(params, args, code) {
    const func = new Function(...params, code);
    return func(...args);
}
