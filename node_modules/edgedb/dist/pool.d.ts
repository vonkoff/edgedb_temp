/*!
 * This source file is part of the EdgeDB open source project.
 *
 * Copyright 2020-present MagicStack Inc. and the EdgeDB authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { ConnectConfig } from "./con_utils";
import { NormalizedConnectConfig } from "./con_utils";
import { ConnectionImpl, InnerConnection } from "./client";
import { StandaloneConnection } from "./client";
import { RetryOptions, SimpleRetryOptions, SimpleTransactionOptions, TransactionOptions } from "./options";
import { CodecsRegistry } from "./codecs/registry";
import { ALLOW_MODIFICATIONS, INNER, QueryArgs, Client, IClientStats } from "./ifaces";
import { Transaction } from "./transaction";
declare const DETACH: unique symbol;
declare const DETACHED: unique symbol;
export declare const HOLDER: unique symbol;
export declare class Deferred<T> {
    private _promise;
    private _resolve?;
    private _reject?;
    private _result;
    private _done;
    get promise(): Promise<T | undefined>;
    get done(): boolean;
    get result(): T | PromiseLike<T> | undefined;
    setResult(value?: T | PromiseLike<T> | undefined): Promise<void>;
    setFailed(reason?: any): Promise<void>;
    constructor();
}
export declare class ClientInnerConnection extends InnerConnection {
    private [DETACHED];
    private [HOLDER];
    constructor(config: NormalizedConnectConfig, registry: CodecsRegistry);
    reconnect(singleAttempt?: boolean): Promise<ConnectionImpl>;
    detach(): ClientInnerConnection;
}
export declare class ClientConnection extends StandaloneConnection {
    [INNER]: ClientInnerConnection;
    protected initInner(config: NormalizedConnectConfig, registry: CodecsRegistry): void;
    protected cleanup(): void;
    [DETACH](): ClientConnection | null;
}
export interface ClientOptions {
    concurrency?: number;
}
export declare class ClientStats implements IClientStats {
    private _queueLength;
    private _openConnections;
    constructor(queueLength: number, openConnections: number);
    get queueLength(): number;
    get openConnections(): number;
}
export declare class ClientShell implements Client {
    [ALLOW_MODIFICATIONS]: never;
    private impl;
    private options;
    protected constructor(dsn?: string, connectOptions?: ConnectOptions);
    protected shallowClone(): this;
    withTransactionOptions(opt: TransactionOptions | SimpleTransactionOptions): this;
    withRetryOptions(opt: RetryOptions | SimpleRetryOptions): this;
    getStats(): ClientStats;
    ensureConnected(): Promise<this>;
    rawTransaction<T>(action: (transaction: Transaction) => Promise<T>): Promise<T>;
    retryingTransaction<T>(action: (transaction: Transaction) => Promise<T>): Promise<T>;
    transaction<T>(action: (transaction: Transaction) => Promise<T>): Promise<T>;
    execute(query: string): Promise<void>;
    query<T = unknown>(query: string, args?: QueryArgs): Promise<T[]>;
    queryJSON(query: string, args?: QueryArgs): Promise<string>;
    querySingle<T = unknown>(query: string, args?: QueryArgs): Promise<T | null>;
    querySingleJSON(query: string, args?: QueryArgs): Promise<string>;
    queryRequiredSingle<T = unknown>(query: string, args?: QueryArgs): Promise<T>;
    queryRequiredSingleJSON(query: string, args?: QueryArgs): Promise<string>;
    close(): Promise<void>;
    isClosed(): boolean;
    terminate(): void;
}
export declare type ConnectOptions = ConnectConfig & ClientOptions;
export declare function createClient(options?: string | ConnectOptions | null): Client;
export declare function connect(dsnOrInstanceName?: string | ConnectConfig | null, options?: ConnectConfig | null): Promise<Client>;
interface PoolOptions {
    connectOptions?: ConnectConfig;
    minSize?: number;
    maxSize?: number;
}
export declare function createPool(dsnOrInstanceName?: string | PoolOptions | null, options?: PoolOptions | null): Promise<Client>;
export {};
