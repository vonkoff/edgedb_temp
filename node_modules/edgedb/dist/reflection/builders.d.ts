declare type Mode = "ts" | "js" | "dts";
declare type ModuleKind = "esm" | "cjs";
export interface IdentRef {
    type: "identRef";
    name: string;
    opts?: {
        prefix?: string;
    };
}
export declare type CodeFragment = string | IdentRef;
export interface Frag {
    type: "frag";
    modes: Set<Mode>;
    content: CodeFragment[];
}
export declare const f: (...modes: Mode[]) => (strings: TemplateStringsArray, ...exprs: (CodeFragment | CodeFragment[])[]) => Frag;
export declare const ts: (strings: TemplateStringsArray, ...exprs: (CodeFragment | CodeFragment[])[]) => Frag;
export declare const js: (strings: TemplateStringsArray, ...exprs: (CodeFragment | CodeFragment[])[]) => Frag;
export declare const r: (strings: TemplateStringsArray, ...exprs: (CodeFragment | CodeFragment[])[]) => Frag;
export declare const all: (strings: TemplateStringsArray, ...exprs: (CodeFragment | CodeFragment[])[]) => Frag;
export declare const dts: (strings: TemplateStringsArray, ...exprs: (CodeFragment | CodeFragment[])[]) => Frag;
export declare const t: (strings: TemplateStringsArray, ...exprs: (CodeFragment | CodeFragment[])[]) => Frag;
declare type AnyCodeFrag = CodeFragment | Frag;
export declare class CodeBuffer {
    private buf;
    private indent;
    getBuf(): AnyCodeFrag[][];
    nl(): void;
    indented(nested: () => void): void;
    writeln(...lines: AnyCodeFrag[][]): void;
    writeBuf(buf: CodeBuffer): void;
    isEmpty(): boolean;
}
export declare class CodeBuilder {
    private dirBuilder;
    private dir;
    private buf;
    private importsExports;
    constructor(dirBuilder: DirBuilder, dir: string);
    addImport: (names: {
        [key: string]: string | boolean;
    }, fromPath: string, allowFileExt?: boolean, modes?: Mode[] | undefined, typeOnly?: boolean) => void;
    addDefaultImport: (name: string, fromPath: string, allowFileExt?: boolean, modes?: Mode[] | undefined, typeOnly?: boolean) => void;
    addStarImport: (name: string, fromPath: string, allowFileExt?: boolean, modes?: Mode[] | undefined, typeOnly?: boolean) => void;
    addExport: (name: string | IdentRef | (string | IdentRef)[], as?: string | undefined, isDefault?: boolean, modes?: Mode[] | undefined) => void;
    addRefsDefaultExport: (ref: IdentRef, as: string) => void;
    addExportFrom: (names: {
        [key: string]: string | boolean;
    }, fromPath: string, allowFileExt?: boolean, modes?: Mode[] | undefined) => void;
    addExportStarFrom: (name: string | null, fromPath: string, allowFileExt?: boolean, modes?: Mode[] | undefined) => void;
    getDefaultExportKeys(): string[];
    registerRef(fqn: string, id: string): void;
    nl(): void;
    indented(nested: () => void): void;
    writeln(...lines: AnyCodeFrag[][]): void;
    writeBuf(buf: CodeBuffer): void;
    private resolveIdentRef;
    render({ mode, moduleKind, forceDefaultExport, }: {
        mode: Mode;
        moduleKind?: ModuleKind;
        forceDefaultExport?: boolean;
    }): string;
    isEmpty(): boolean;
}
export declare class DirBuilder {
    private _map;
    _refs: Map<string, {
        internalName: string;
        dir: string;
    }>;
    _modules: Map<string, string>;
    getPath(fn: string): CodeBuilder;
    getModule(moduleName: string): CodeBuilder;
    debug(): string;
    write(to: string, mode: "ts" | "js+dts", moduleKind: ModuleKind): Promise<void>;
}
export {};
